// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReviewYourself.WebApi.Tools;

namespace ReviewYourself.WebApi.Migrations
{
    [DbContext(typeof(PeerReviewContext))]
    partial class PeerReviewContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ReviewYourself.WebApi.DatabaseModels.Announcing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AuthorId");

                    b.Property<Guid>("CourseId");

                    b.Property<string>("Description");

                    b.Property<DateTime>("PostTime");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CourseId");

                    b.ToTable("Announcing");
                });

            modelBuilder.Entity("ReviewYourself.WebApi.DatabaseModels.AuthorizeData", b =>
                {
                    b.Property<string>("Login")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Password");

                    b.HasKey("Login");

                    b.ToTable("AuthorizeDatas");
                });

            modelBuilder.Entity("ReviewYourself.WebApi.DatabaseModels.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AnnouncingId");

                    b.Property<Guid>("AuthorId");

                    b.Property<string>("Content");

                    b.Property<Guid?>("CourseTaskId");

                    b.Property<DateTime>("PostTime");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncingId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CourseTaskId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("ReviewYourself.WebApi.DatabaseModels.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("ReviewYourself.WebApi.DatabaseModels.CourseTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AuthorId");

                    b.Property<Guid>("CourseId");

                    b.Property<string>("Description");

                    b.Property<DateTime>("PostTime");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseTasks");
                });

            modelBuilder.Entity("ReviewYourself.WebApi.DatabaseModels.Criteria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CourseTaskId");

                    b.Property<string>("Description");

                    b.Property<int>("MaxPoint");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("CourseTaskId");

                    b.ToTable("Criterias");
                });

            modelBuilder.Entity("ReviewYourself.WebApi.DatabaseModels.Participation", b =>
                {
                    b.Property<Guid>("CourseId");

                    b.Property<Guid>("MemberId");

                    b.Property<int>("Permission");

                    b.Property<Guid?>("UserId");

                    b.HasKey("CourseId", "MemberId");

                    b.HasIndex("UserId");

                    b.ToTable("MemberTypes");
                });

            modelBuilder.Entity("ReviewYourself.WebApi.DatabaseModels.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AuthorId");

                    b.Property<DateTime>("PostTime");

                    b.Property<Guid>("SolutionId");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("SolutionId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("ReviewYourself.WebApi.DatabaseModels.ReviewCriteria", b =>
                {
                    b.Property<Guid>("CriteriaId");

                    b.Property<Guid>("ReviewId");

                    b.Property<string>("Description");

                    b.Property<int>("Rating");

                    b.HasKey("CriteriaId", "ReviewId");

                    b.HasIndex("ReviewId");

                    b.ToTable("ReviewCriterias");
                });

            modelBuilder.Entity("ReviewYourself.WebApi.DatabaseModels.Solution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AuthorId");

                    b.Property<Guid>("CourseTaskId");

                    b.Property<bool>("IsResolved");

                    b.Property<DateTime>("PostTime");

                    b.Property<string>("TextData");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CourseTaskId");

                    b.ToTable("Solutions");
                });

            modelBuilder.Entity("ReviewYourself.WebApi.DatabaseModels.Token", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("AccessToken");

                    b.HasKey("UserId", "AccessToken");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("ReviewYourself.WebApi.DatabaseModels.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Biography");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("Login");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique()
                        .HasFilter("[Login] IS NOT NULL");

                    b.ToTable("UsersTable");
                });

            modelBuilder.Entity("ReviewYourself.WebApi.DatabaseModels.Announcing", b =>
                {
                    b.HasOne("ReviewYourself.WebApi.DatabaseModels.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ReviewYourself.WebApi.DatabaseModels.Course", "Course")
                        .WithMany("Announcings")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ReviewYourself.WebApi.DatabaseModels.Comment", b =>
                {
                    b.HasOne("ReviewYourself.WebApi.DatabaseModels.Announcing")
                        .WithMany("Comments")
                        .HasForeignKey("AnnouncingId");

                    b.HasOne("ReviewYourself.WebApi.DatabaseModels.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ReviewYourself.WebApi.DatabaseModels.CourseTask")
                        .WithMany("Comments")
                        .HasForeignKey("CourseTaskId");
                });

            modelBuilder.Entity("ReviewYourself.WebApi.DatabaseModels.CourseTask", b =>
                {
                    b.HasOne("ReviewYourself.WebApi.DatabaseModels.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ReviewYourself.WebApi.DatabaseModels.Course", "Course")
                        .WithMany("CourseTasks")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ReviewYourself.WebApi.DatabaseModels.Criteria", b =>
                {
                    b.HasOne("ReviewYourself.WebApi.DatabaseModels.CourseTask", "CourseTask")
                        .WithMany("Criterias")
                        .HasForeignKey("CourseTaskId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ReviewYourself.WebApi.DatabaseModels.Participation", b =>
                {
                    b.HasOne("ReviewYourself.WebApi.DatabaseModels.Course", "Course")
                        .WithMany("Members")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ReviewYourself.WebApi.DatabaseModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ReviewYourself.WebApi.DatabaseModels.Review", b =>
                {
                    b.HasOne("ReviewYourself.WebApi.DatabaseModels.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ReviewYourself.WebApi.DatabaseModels.Solution", "Solution")
                        .WithMany()
                        .HasForeignKey("SolutionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ReviewYourself.WebApi.DatabaseModels.ReviewCriteria", b =>
                {
                    b.HasOne("ReviewYourself.WebApi.DatabaseModels.Criteria", "Criteria")
                        .WithMany()
                        .HasForeignKey("CriteriaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ReviewYourself.WebApi.DatabaseModels.Review", "Review")
                        .WithMany("Evaluations")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ReviewYourself.WebApi.DatabaseModels.Solution", b =>
                {
                    b.HasOne("ReviewYourself.WebApi.DatabaseModels.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ReviewYourself.WebApi.DatabaseModels.CourseTask", "CourseTask")
                        .WithMany("Solutions")
                        .HasForeignKey("CourseTaskId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
